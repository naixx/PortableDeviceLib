// <auto-generated/>
#pragma warning disable 0067, 0108, 0618
namespace PortableDeviceLib.Stubs
{
    /// <summary>Stub of MTPConstants</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.15.40714.1")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = MTPConstants")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SMTPConstants
      : global::PortableDeviceLib.MTPConstants
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SMTPConstants()
        {
            this.Initialize();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SMTPConstants</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void Initialize()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace PortableDeviceLib.Stubs
{
    /// <summary>Stub of PortableDeviceException</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.15.40714.1")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = PortableDeviceException")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SPortableDeviceException
      : global::PortableDeviceLib.PortableDeviceException
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SPortableDeviceException()
        {
            this.Initialize();
        }

        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SPortableDeviceException(string message)
        : base(message)
        {
            this.Initialize();
        }

        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SPortableDeviceException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        : base(info, context)
        {
            this.Initialize();
        }

        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SPortableDeviceException(string message, global::System.Exception innerException)
        : base(message, innerException)
        {
            this.Initialize();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SPortableDeviceException</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void Initialize()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace PortableDeviceLib.Stubs
{
    /// <summary>Stub of PortableDeviceObject</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.15.40714.1")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = PortableDeviceObject")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class SPortableDeviceObject
      : global::PortableDeviceLib.PortableDeviceObject
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SPortableDeviceObject(string id)
        : base(id)
        {
            this.Initialize();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SPortableDeviceObject</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void Initialize()
        {
        }

        /// <summary>Stub of method System.String PortableDeviceLib.PortableDeviceObject.ToString()</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public override string ToString()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<string> sh
               = this.ToString01;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<string>)null)
              return sh.Invoke();
            else 
            {
              if (this.callBase)
                return base.ToString();
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.FallbackBehavior;
              return 
                stub.Result<global::PortableDeviceLib.Stubs.SPortableDeviceObject, string>
                    (this);
            }
        }

        /// <summary>Stub of method System.String PortableDeviceLib.PortableDeviceObject.ToString()</summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<string> ToString01;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace PortableDeviceLib.Stubs
{
    /// <summary>Stub of PortableDevicePKeys</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.15.40714.1")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = PortableDevicePKeys")]
    [global::System.Diagnostics.DebuggerStepThrough]
    internal partial class SPortableDevicePKeys
      : global::PortableDeviceLib.PortableDevicePKeys
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public SPortableDevicePKeys()
        {
            this.Initialize();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type SPortableDevicePKeys</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void Initialize()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace PortableDeviceLib.Stubs
{
    /// <summary>Stub of Tree`1</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.15.40714.1")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = Tree`1")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class STree<T>
      : global::PortableDeviceLib.Tree<T>
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public STree()
        {
            this.Initialize();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type STree</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void Initialize()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace PortableDeviceLib.Stubs
{
    /// <summary>Stub of TreeNode`1</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.15.40714.1")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = TreeNode`1")]
    [global::System.Diagnostics.DebuggerStepThrough]
    public partial class STreeNode<T>
      : global::PortableDeviceLib.TreeNode<T>
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public STreeNode(global::PortableDeviceLib.TreeNode<T> parent)
        : base(parent)
        {
            this.Initialize();
        }

        /// <summary>Initializes a new instance</summary>
        [global::System.Diagnostics.DebuggerHidden]
        public STreeNode(global::PortableDeviceLib.TreeNode<T> parent, T value)
        : base(parent, value)
        {
            this.Initialize();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return this.callBase;
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior FallbackBehavior
        {
            [global::System.Diagnostics.DebuggerHidden]
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent
                    (this.defaultStub);
            }
            [global::System.Diagnostics.DebuggerHidden]
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Initializes a new instance of type STreeNode</summary>
        [global::System.Diagnostics.DebuggerHidden]
        private void Initialize()
        {
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}

